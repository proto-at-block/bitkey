# syntax=docker/dockerfile:1.12
ARG ENABLE_SCCACHE=0
ARG SCCACHE_BUCKET
ARG SCCACHE_REGION
ARG SCCACHE_S3_KEY_PREFIX

FROM scratch AS source
COPY --link Cargo.lock .
COPY --link Cargo.toml .
COPY --link src src
COPY --link .cargo .cargo

FROM scratch AS vendor
COPY --link vendor vendor

FROM rust:1.82.0-alpine@sha256:2f42ce0d00c0b14f7fd84453cdc93ff5efec5da7ce03ead6e0b41adb1fbe834e AS toolchain
ARG ENABLE_SCCACHE
COPY --link rust-toolchain.toml .
RUN cargo version
RUN apk add --no-cache \
  git \
  musl-dev \
  openssl-dev  \
  pkgconfig \
  protobuf
RUN [ "$ENABLE_SCCACHE" == "1" ] && apk add --no-cache sccache || true
RUN cargo --locked install cargo-chef@0.1.68
ENV PROTOC=/usr/bin/protoc

FROM toolchain AS planner
WORKDIR /usr/src/server
COPY --from=vendor . .
COPY --from=core . ../core
COPY --from=source . .
RUN cargo --locked chef prepare --bin server --recipe-path recipe.json

FROM toolchain AS builder
ARG ENABLE_SCCACHE
ARG SCCACHE_BUCKET
ARG SCCACHE_REGION
ARG SCCACHE_S3_KEY_PREFIX
WORKDIR /usr/src/server
COPY --from=vendor . .
COPY --from=core . ../core
COPY --from=planner /usr/src/server/recipe.json recipe.json
RUN --mount=type=secret,id=AWS_ACCESS_KEY_ID --mount=type=secret,id=AWS_SECRET_ACCESS_KEY --mount=type=secret,id=AWS_SESSION_TOKEN <<EOF
if [ "$ENABLE_SCCACHE" == "1" ]; then
  export RUSTC_WRAPPER=sccache
  export AWS_ACCESS_KEY_ID=$(cat /run/secrets/AWS_ACCESS_KEY_ID)
  export AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/AWS_SECRET_ACCESS_KEY)
  export AWS_SESSION_TOKEN=$(cat /run/secrets/AWS_SESSION_TOKEN)
fi
cargo --locked chef cook --release --bin server --recipe-path recipe.json
if [ "$ENABLE_SCCACHE" == "1" ]; then
  sccache --show-stats
fi
EOF
COPY --from=source . .
RUN --mount=type=secret,id=AWS_ACCESS_KEY_ID --mount=type=secret,id=AWS_SECRET_ACCESS_KEY --mount=type=secret,id=AWS_SESSION_TOKEN <<EOF
if [ "$ENABLE_SCCACHE" == "1" ]; then
  export RUSTC_WRAPPER=sccache
  export AWS_ACCESS_KEY_ID=$(cat /run/secrets/AWS_ACCESS_KEY_ID)
  export AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/AWS_SECRET_ACCESS_KEY)
  export AWS_SESSION_TOKEN=$(cat /run/secrets/AWS_SESSION_TOKEN)
fi
cargo --locked install --bin server --features partnerships --path src/api/server
if [ "$ENABLE_SCCACHE" == "1" ]; then
  sccache --show-stats
fi
EOF

FROM alpine:3.21.0@sha256:21dc6063fd678b478f57c0e13f47560d0ea4eeba26dfc947b2a4f81f686b9f45 AS deployable
COPY --from=builder /usr/local/cargo/bin/server /server
COPY --link src/api/Rocket.toml .
COPY --link src/api/resources resources
# needed to support ring (which we pull in via jsonwebtoken)
RUN apk add --no-cache libc6-compat
EXPOSE 80/tcp
ENV ROCKET_PROFILE=development
ENV OTEL_BSP_SCHEDULE_DELAY=500
ENTRYPOINT ["/server"]
CMD ["server"]
