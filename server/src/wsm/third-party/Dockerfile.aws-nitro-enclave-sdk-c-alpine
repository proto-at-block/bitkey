# syntax=docker/dockerfile:1.12
FROM rust:1.86.0-alpine@sha256:661d708cc863ce32007cf46807a72062a80d2944a6fae9e0d83742d2e04d5375 AS builder

RUN apk add --no-cache \
    cmake \
    doxygen \
    g++ \
    git \
    go \
    libffi-dev \
    make \
    ninja \
    openssl-dev \
    py3-pip \
    tar \
    zlib-dev

# We keep the build artifacts in the -build directory
ARG REALWORKDIR=/tmp/crt-builder
WORKDIR ${REALWORKDIR}

RUN git clone -b v1.0.2 https://github.com/awslabs/aws-lc.git
WORKDIR aws-lc
RUN git checkout 11b50d39cf2378703a4ca6b6fee9d76a2e9852d1
RUN cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S aws-lc -B aws-lc/build .
RUN go env -w GOPROXY=direct
RUN cmake --build aws-lc/build --target install

WORKDIR ${REALWORKDIR}
RUN git clone -b v1.3.11 https://github.com/aws/s2n-tls.git
WORKDIR s2n-tls
RUN git checkout 0d41122bd2ca62a5de384b79c524dd48852b2071
RUN cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -S . -B build
RUN cmake --build build --target install

WORKDIR ${REALWORKDIR}
RUN git clone -b v0.6.20 https://github.com/awslabs/aws-c-common.git
WORKDIR aws-c-common
RUN git checkout 68f28f8df258390744f3c5b460250f8809161041
RUN cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S . -B build
RUN cmake --build build --target install

WORKDIR ${REALWORKDIR}
RUN git clone -b v0.1.2 https://github.com/awslabs/aws-c-sdkutils.git
WORKDIR aws-c-sdkutils
RUN git checkout e3c23f4aca31d9e66df25827645f72cbcbfb657a
RUN cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S . -B build
RUN cmake --build build --target install

WORKDIR ${REALWORKDIR}
RUN git clone -b v0.5.17 https://github.com/awslabs/aws-c-cal.git
WORKDIR aws-c-cal
RUN git checkout 7eb1d7360ea205ff275d2acc6cce2682063b643f
RUN cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S . -B build
RUN cmake --build build --target install

WORKDIR ${REALWORKDIR}
RUN git clone -b v0.10.21 https://github.com/awslabs/aws-c-io.git
WORKDIR aws-c-io
RUN git checkout 0457935752729d02b3ccc224205622fd275be2bb
RUN cmake -DUSE_VSOCK=1 -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S . -B build
RUN cmake --build build --target install

WORKDIR ${REALWORKDIR}
RUN git clone -b v0.2.14 http://github.com/awslabs/aws-c-compression.git
WORKDIR aws-c-compression
RUN git checkout 5fab8bc5ab5321d86f6d153b06062419080820ec
RUN cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S . -B build
RUN cmake --build build --target install

WORKDIR ${REALWORKDIR}
RUN git clone -b v0.6.13 https://github.com/awslabs/aws-c-http.git
WORKDIR aws-c-http
RUN git checkout 3f8ffda541eab815646f739cef2b350d6e7d5406
RUN cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S . -B build
RUN cmake --build build --target install

WORKDIR ${REALWORKDIR}
RUN git clone -b v0.6.11 https://github.com/awslabs/aws-c-auth.git
WORKDIR aws-c-auth
RUN git checkout e1b95cca6f2248c28b66ddb40bcccd35a59cb8b5
RUN cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S . -B build
RUN cmake --build build --target install

WORKDIR ${REALWORKDIR}
RUN git clone -b json-c-0.16-20220414 https://github.com/json-c/json-c.git
WORKDIR json-c
RUN git checkout 2f2ddc1f2dbca56c874e8f9c31b5b963202d80e7
RUN cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_SHARED_LIBS=OFF -GNinja -S . -B build
RUN cmake --build build --target install

WORKDIR ${REALWORKDIR}
RUN git clone -b v0.2.1 https://github.com/aws/aws-nitro-enclaves-nsm-api.git
WORKDIR aws-nitro-enclaves-nsm-api
RUN git checkout cfcf7a29587f5bc9338a2535221af84492f949c5
COPY --link rust-toolchain.toml aws-nitro-enclaves-nsm-api/rust-toolchain.toml
RUN <<EOF
    cd aws-nitro-enclaves-nsm-api
    cargo build --release -p nsm-lib
EOF
RUN mv target/release/libnsm.a /usr/lib
RUN mv target/release/nsm.h /usr/include

WORKDIR ${REALWORKDIR}
RUN git clone -b v0.3.2 https://github.com/aws/aws-nitro-enclaves-sdk-c.git
WORKDIR aws-nitro-enclaves-sdk-c
RUN git checkout e751fd8ae0fcbe635e6f177d36314978c7f99ea3
RUN cmake -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=/usr -GNinja -S . -B build
RUN cmake --build build --target install

# Test
FROM builder AS test
RUN cmake --build build --target test

WORKDIR ${REALWORKDIR}

# kmstool-enclave
FROM alpine:3.21.0@sha256:21dc6063fd678b478f57c0e13f47560d0ea4eeba26dfc947b2a4f81f686b9f45 AS kmstool-enclave
COPY --from=builder /usr/bin/kmstool_enclave /kmstool_enclave
ARG REGION
ARG ENDPOINT
ENV REGION=${REGION}
ENV ENDPOINT=${ENDPOINT}
CMD ["/kmstool_enclave"]

# kmstool-instance
FROM alpine:3.21.0@sha256:21dc6063fd678b478f57c0e13f47560d0ea4eeba26dfc947b2a4f81f686b9f45  AS kmstool-instance
COPY --from=builder /usr/bin/kmstool_instance /kmstool_instance
CMD ["/kmstool_instance"]

# kmstool-enclave-cli
FROM alpine:3.21.0@sha256:21dc6063fd678b478f57c0e13f47560d0ea4eeba26dfc947b2a4f81f686b9f45  AS kmstool-enclave-cli
COPY --from=builder /usr/bin/kmstool_enclave_cli /kmstool_enclave_cli
