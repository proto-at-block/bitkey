#pragma once

#include "attributes.h"
#include "hash.h"

#include <assert.h>
#include <stdbool.h>
#include <stddef.h>

#define GRANT_PROTOCOL_VERSION (1)

#define GRANT_DEVICE_ID_LEN (8)
#define GRANT_CHALLENGE_LEN (16)
#define GRANT_SIGNATURE_LEN (64)

// Note: This protocol was written with the idea that we'd support both transactio verification
// and fingerprint reset. We chose to use a different protocol for transaction verification, to
// reduce the number of hardware taps in the overall user flow.

// Represents the action requested by the firmware that requires server authorization.
typedef enum PACKED {
  ACTION_INVALID,
  ACTION_FINGERPRINT_RESET,
} grant_action_t;

_Static_assert(sizeof(grant_action_t) == 1, "grant_action_t size is incorrect");

// Structure created by the firmware to request authorization for a sensitive action.
// This structure is serialized and signed by the hardware authentication key.
typedef struct PACKED {
  uint8_t version;                         // Protocol version.
  uint8_t device_id[GRANT_DEVICE_ID_LEN];  // Unique device identifier.
  uint8_t challenge[GRANT_CHALLENGE_LEN];  // Random challenge generated by firmware.
  grant_action_t action;                   // The requested action.
  uint8_t signature[GRANT_SIGNATURE_LEN];  // Signature over the preceding fields + label,
                                           // using the hardware authentication key.
} grant_request_t;

_Static_assert(sizeof(grant_request_t) == 90, "grant_request_t size is incorrect");

// Null terminators are not included in serialization.
#define GRANT_REQUEST_LABEL     "BKGrantReq"
#define GRANT_LABEL             "BKGrant"
#define GRANT_REQUEST_LABEL_LEN (sizeof(GRANT_REQUEST_LABEL) - 1)
#define GRANT_LABEL_LEN         (sizeof(GRANT_LABEL) - 1)

#define GRANT_REQUEST_EXCLUDING_SIGNATURE_LEN (offsetof(grant_request_t, signature))
#define GRANT_REQUEST_SIGNABLE_LEN            (GRANT_REQUEST_EXCLUDING_SIGNATURE_LEN + GRANT_REQUEST_LABEL_LEN)

// Structure sent from the WSM server to the firmware, authorizing an action.
// This structure contains the original serialized request and the server's signature.
// Serialization must be packed.
typedef struct PACKED {
  uint8_t version;                                      // Protocol version.
  uint8_t serialized_request[sizeof(grant_request_t)];  // The original grant_request_t serialized.
  uint8_t
    signature[GRANT_SIGNATURE_LEN];  // WSM Integrity Key signature over serialized_request + label.
} grant_t;

#define GRANT_EXCLUDING_SIGNATURE_LEN (offsetof(grant_t, signature))
#define GRANT_SIGNABLE_LEN            (GRANT_EXCLUDING_SIGNATURE_LEN + GRANT_LABEL_LEN)

typedef enum {
  GRANT_RESULT_OK = 0,
  GRANT_RESULT_ERROR_SIGNING,           // Failed to sign the request with HW key.
  GRANT_RESULT_ERROR_VERIFICATION,      // WIK signature verification failed.
  GRANT_RESULT_ERROR_REQUEST_MISMATCH,  // Serialized request in grant doesn't match original.
  GRANT_RESULT_ERROR_VERSION_MISMATCH,  // Serialized version in grant doesn't match original.
  GRANT_RESULT_ERROR_INTERNAL,          // Other internal errors.
  GRANT_RESULT_ERROR_STORAGE,           // Storage errors.
} grant_protocol_result_t;

/**
 * @brief Initializes the grant protocol.
 *
 * @param is_production Whether the device is in production mode, which selects
 *                      the appropriate WIK public key.
 */
void grant_protocol_init(bool is_production);

/**
 * @brief Creates a grant_request_t structure.
 *
 * Fills the provided grant_request_t structure with the current protocol version,
 * the device ID, a freshly generated challenge, and the specified action.
 * It then signs the request using the hardware's authentication key.
 *
 * The label "BKGrantReq" is prepended to the serialized data before signing.
 *
 * @param action The action for which the grant is being requested.
 * @param[out] out_request Pointer to the grant_request_t structure to be filled. Must not be NULL.
 * @return GRANT_RESULT_OK if the request is created successfully.
 */
grant_protocol_result_t grant_protocol_create_request(grant_action_t action,
                                                      grant_request_t* out_request);

/**
 * @brief Verifies a received Grant structure against the original request.
 *
 * Verifies the WSM Integrity Key (WIK) signature within the grant over the
 * grant's serialized_request field. The label "BKGrant" is prepended to the
 * signed data for verification.
 *
 * Ensures:
 *  - the grant's serialized_request field matches the original request.
 *  - the grant's signature is valid.
 *  - the grant is deleted after use, no matter what.
 *
 * @param grant Pointer to the received grant_t structure. Must not be NULL.
 * @return GRANT_RESULT_OK if the grant is valid.
 */
grant_protocol_result_t grant_protocol_verify_grant(const grant_t* grant);

/**
 * @brief Deletes the outstanding request. Does nothing if there is no outstanding request.
 *
 * @return GRANT_RESULT_OK if the request is deleted successfully.
 */
grant_protocol_result_t grant_protocol_delete_outstanding_request(void);
