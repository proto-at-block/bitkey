gradle := "../bin/gradle"
gradle_android := "../bin/gradle --project-dir android"
gradle_sample_app := "../bin/gradle --project-dir sample"
xcode_clt_path := "/Library/Developer/CommandLineTools"

[private]
default:
  just --list

[private]
list:
  just --list

# Update git submodules
submodules:
  git submodule update --init --recursive

# Run Gradle profiler to measure build times
gradle-profiler:
 gradle-profiler --benchmark --scenario-file gradle/benchmarks/profiler.scenarios --gradle-version $(bin/hermit info gradle | awk '/^Root/ { print $2 }')

# Create git tag and branch for Team App release
create-team-branch version-number:
  git tag --annotate {{version-number}} --message {{version-number}}
  git checkout -b internal-release/{{version-number}}

# Builds and installs debug flavor of the Android app
android-app-install:
  {{gradle}} installDebug -p android/app

# Clear our Android app's data and cache
android-app-clear:
  adb shell pm clear world.bitkey.app

# Uninstall Android app
android-app-uninstall:
  adb uninstall world.bitkey.app

# Verify SqlDelight schemas and migrations
test-unit-database:
  {{gradle}} verifySqlDelightMigration verifySqlDelightMigrationForeignKeyCheck

# Run unit tests targeting JVM
test-unit-jvm:
  {{gradle}} jvmTest
  {{gradle_sample_app}} jvmTest

# Run unit tests on host machine targeting Android (with platform stubs)
test-unit-android-host:
  {{gradle}} testDebugUnitTest

# Run unit tests on iOS simulator
test-unit-ios-simulator:
  {{gradle}} iosTest

# Run integration tests targeting JVM
test-integration-jvm:
  {{gradle}} cleanJvmIntegrationTest jvmIntegrationTest

# Run integration tests targeting all platforms - currently only JVM is supported
test-integration-all:
  {{gradle}} cleanJvmIntegrationTest jvmIntegrationTest

# Run unit tests targeting all platforms
test-unit-all:
  {{gradle}} jvmTest testDebugUnitTest iosTest verifySqlDelightMigration verifySqlDelightMigrationForeignKeyCheck

# Run unit and integration tests targeting all platforms
test-all:
  just test-unit-all
  just test-integration-all

# Record and update baseline UI snapshots for iOS and Android
snapshots-record:
    just android-snapshots-record
    just ios-snapshots-record

# Verify UI snapshots against the baseline for iOS and Android
snapshots-verify:
    just android-snapshots-verify
    just ios-snapshots-verify

# Record and update baseline UI snapshots for Android
android-snapshots-record:
  {{gradle_android}} recordPaparazziDebug

# Verify UI snapshots against the baseline for Android
android-snapshots-verify:
  {{gradle_android}} verifyPaparazziDebug

# Verify UI snapshots for iOS
ios-snapshots-verify:
  #!/bin/bash
  set -e
  just ios-snapshot-prework
  export SNAPSHOT_TESTS_RECORD=false
  echo "⚠️⚠️⚠️ Please be aware than verifying snapshots locally may result in flakey failures ⚠️⚠️⚠️"
  xcodebuild test -project 'ios/Wallet.xcodeproj' -scheme 'WalletSnapshotTests' -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max,OS=18.5'

# Record and update baseline UI snapshots for iOS
ios-snapshots-record:
  #!/bin/bash
  set -e
  just ios-snapshot-prework
  export SNAPSHOT_TESTS_RECORD=true
  echo "⚠️⚠️⚠️ Only for use for local development, DO NOT COMMIT LOCALLY GENERATED SNAPSHOTS ⚠️⚠️⚠️"
  xcodebuild test -project 'ios/Wallet.xcodeproj' -scheme 'WalletSnapshotTests' -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max,OS=18.5'

[private]
ios-snapshot-prework:
  #!/bin/bash
  just install-xcode-clt
  # Check for the specific iOS simulator runtime
  runtime=$(xcrun simctl list runtimes | grep -w 'com.apple.CoreSimulator.SimRuntime.iOS-18-5' && echo true || echo false)
  if [ "$runtime" == "false" ]; then
    echo "You must install the iOS 18.5 simulator runtime to record and verify snapshot tests. See the docs https://docs.wallet.build/guides/mobile/ui/framework/#updating-the-snapshots"
    exit 1
  fi
  # Check for the specific simulator device
  devices=$(xcrun simctl list devices | awk '/-- iOS 18.5 --/{flag=1;next}/--/{flag=0}flag')
  device=$(echo "$devices" | grep -E 'iPhone 16 Pro Max \(.*\)' && echo true || echo false)
  if [ "$device" == "false" ]; then
    echo "You must install the iPhone 16 Pro Max 18.5 simulator to record and verify snapshot tests. See the docs https://docs.wallet.build/guides/mobile/ui/framework/#updating-the-snapshots"
    exit 1
  fi
  # Generate Swift Snapshot test cases before generating xcode project
  {{gradle}} :ui:features-public:kspKotlinIosSimulatorArm64 --rerun
  just xcodegen

# Configure and onboard local environment:
onboard: install-git-lfs install-xcode-clt install-jetbrains-toolbox submodules install-xcode-kmp-plugin install-docker install-aws-creds sync-aws-creds list-env-vars install-coreutils install-swiftformat

# Generate Xcode project (for both device and simulator targets)
xcodegen:
  cd ios/ && xcodegen
  just reconstruct-ios-package-resolved-file

[private]
install-xcode-clt:
  xcode-select --install || true # "fails" if Xcode CLT already installed
  @echo "Waiting for Xcode Command Line Tools to be installed..."
  @while ! {{xcode_clt_path}}/usr/bin/clang --version 2> /dev/null; do sleep 1; done
  @echo "Xcode Command Line Tools are installed."

[private]
install-xcode-kmp-plugin:
  brew install xcode-kotlin
  xcode-kotlin install
  @echo "Xcode KMP plugin is installed."

[private]
install-coreutils:
  brew install coreutils
  @echo "coreutils is installed."

[private]
install-aws-creds:
  brew install aws-creds
  @echo "AWS Creds is installed."

[private]
install-git-lfs:
  git lfs install --local
  @echo "Git LFS installed."

[private]
sync-aws-creds:
  aws-creds sync

[private]
install-jetbrains-toolbox:
  brew install --cask jetbrains-toolbox --require-sha
  @echo "JetBrains Toolbox is installed."

[private]
install-docker:
  command -v docker || brew install --cask docker --require-sha
  @echo "Docker is installed."

[private]
install-swiftformat:
  brew install swiftformat
  @echo "swiftformat is installed."

[private]
list-env-vars:
  @echo "Set these environment variables OR add them to  ~/.zprofile:"
  @echo 'export ANDROID_HOME="$HOME/Library/Android/sdk"'
  @echo 'export ANDROID_NDK_VERSION="25.2.9519653"'
  @echo 'export ANDROID_BUILD_TOOLS_VERSION="35.0.0"'
  @echo 'export ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION'
  @echo 'export PATH=$ANDROID_HOME/tools:$PATH'
  @echo 'export PATH=$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS_VERSION:$PATH'
  @echo 'export PATH=$ANDROID_HOME/platform-tools:$PATH'
  @echo 'export JAVA_HOME=$(/usr/libexec/java_home -v 17)'
  @echo 'export PATH=$PATH:$JAVA_HOME'

# Run Detekt code analysis on Kotlin sources
detekt:
  {{gradle}} detektAll --continue

# Run Detekt code analysis on `app/android` code - this does not cover Android source sets in KMP
detekt-android:
  {{gradle_android}} detektAll --continue

# Run Detekt code analysis on all KMP code
detekt-kmp:
  {{gradle}} detektAll --continue

# Run Ktlint, reformat code when possible, fail on violations.
ktlint-format:
  just ktlint-validate --format

# Run Ktlint and fail on violations.
ktlint-validate ARGS="":
  ktlint './**/*.kt' './**/*.kts' '!**/_build/**' {{ARGS}}

# Run swiftformat
swiftformat:
  swiftformat ios/Wallet

# Delete XCode cached build intermediates (Derived Data)
dxdd:
  rm -rfI "/Users/$USER/Library/Developer/Xcode/DerivedData"

# Generates .db schema for databases
generate-db-schema:
  {{gradle}} generateCommonMainBitkeyDatabaseSchema generateCommonMainBitkeyDebugDatabaseSchema

# Verifies validity of the schema and runs migration tests
verify-db-schema:
  {{gradle}} verifySqlDelightMigration verifySqlDelightMigrationForeignKeyCheck

# Run Maestro End-to-End Integration Tests
maestro os:
  if [[ "{{os}}" == "ios" ]]; then \
    maestro test -e APP_ID=world.bitkey.dev maestro-test --include-tags=ios; \
  elif [[ "{{os}}" == "android" ]]; then \
    maestro test -e APP_ID=world.bitkey.debug maestro-test --include-tags=android; \
  fi


# Ensure that correct Gradle version is used, see script file for details.
validate-gradle-version:
  ./scripts/validate-gradle-version.sh

start-backend:
  just -f ../server/justfile start-backend

stop-backend:
  just -f ../server/justfile stop-backend

restart-backend:
  just stop-backend && just start-backend 

get-regtest-funds address amount:
  just -f ../server/justfile get-regtest-funds {{ address }} {{ amount }}

update-gradle-lockfile:
  {{gradle}} :updateDependencyLockFile :build-logic:updateDependencyLockFile -Pbuild.wallet.kmp.iosEnableAllTargets=true -Pbuild.wallet.dependency-locking.is-enabled=false

verify-gradle-lockfile:
  {{gradle}} verifyDependencyLockFile :build-logic:verifyDependencyLockFile -Pbuild.wallet.kmp.iosEnableAllTargets=true

resolve-ios-packages: xcodegen
  xcodebuild -resolvePackageDependencies -project ios/Wallet.xcodeproj

reconstruct-ios-package-resolved-file:
  mkdir -p ios/Wallet.xcodeproj/project.xcworkspace/xcshareddata/swiftpm
  cp ios/Package.lock ios/Wallet.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved

# Use only if the Package.resolved was already updated (for example by Xcode)
fast-update-ios-lockfile:
  cp ios/Wallet.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved ios/Package.lock

update-ios-lockfile: resolve-ios-packages fast-update-ios-lockfile

# Use only if the Package.resolved was already updated (for example by Xcode)
fast-verify-ios-lockfile:
  #!/usr/bin/env bash
  diff_output=$(diff ios/Package.lock ios/Wallet.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
  diff_exit_code=$?
  if [ $diff_exit_code -ne 0 ]; then
    echo "Resolved packages do not match the lock file." >&2
    echo "Consider updating the lockfile using \"just fast-update-ios-lockfile\"." >&2
    echo "$diff_output" >&2
    exit $diff_exit_code
  fi

verify-ios-lockfile: resolve-ios-packages fast-verify-ios-lockfile

verify-android-apk path-to-bitkey-repository-directory path-to-build-directory app-package-name:
  verifiable-build/android/verification/verify-android-apk {{path-to-bitkey-repository-directory}} {{path-to-build-directory}} {{app-package-name}}

# Run all verification tasks required for a PR to be merged
pr-ready:
  #!/usr/bin/env bash
  if ! (git diff --quiet --exit-code && git diff --cached --quiet --exit-code); then
    while true; do
        read -p "Local changes detected! Continue anyway? [y/N]: " yn
        case $yn in
            [Yy]* ) break;;
            [Nn]* ) exit;;
            * ) exit;;
        esac
    done
  fi
  while ! docker info > /dev/null 2>&1; do
    echo "Please start Docker, press enter to continue"
    read -n 1 -s
  done
  while pgrep -x "Xcode" > /dev/null; do
    echo "Please close Xcode, press enter to continue"
    read -n 1 -s
  done
  just detekt
  just verify-gradle-lockfile
  just verify-ios-lockfile
  just test-unit-all
  just android-snapshots-verify
  just ios-snapshots-verify
  just start-backend
  just test-integration-all
  just stop-backend
  just ../valid-dependencies/check-gradle
