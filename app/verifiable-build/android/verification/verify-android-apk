#!/bin/bash
# Verifies that an APK installed on a real device was build from the given source code.
# The script assumes that there is an established ADB session with a phone that contains the app to verify.
# The build directory is used for temporary storage and is not deleted afterwards so that the user can inspect the outputs of each verification step or do certain steps manually.
# Option to run script and compare from pre-downloaded apks and specify a device-spec.json file.
# ./verify-android-apk -d /path/to/apk/directory -s /path/to/device-spec.json /path/to/bitkey/repo /path/to/build/directory

apkSourceDir=""
deviceSpecFile=""

# Parse the new options first
while [[ "$#" -gt 0 ]]; do
  case $1 in
    -d|--apk-dir)
      apkSourceDir="$2"
      shift 2
      ;;
    -s|--device-spec)
      deviceSpecFile="$2"
      shift 2
      ;;
    *)
      break
      ;;
  esac
done

if [ "$#" -ne 2 ]; then
    echo "Usage: $0 [-d|--apk-dir <directory>] [-s|--device-spec <file>] <path-to-bitkey-repository-directory> <path-to-build-directory>" >&2
    echo "Options:" >&2
    echo "  -d|--apk-dir      Directory containing pre-downloaded APKs" >&2
    echo "  -s|--device-spec  Path to device-spec.json file" >&2
    exit 1
fi

if [ ! -f "$1/app/verifiable-build/android/Dockerfile" ]; then
    echo "Cannot find the Dockerfile used for building the AAB. Ensure the path points to the root directory of the Bitkey repository." >&2
    echo "Usage: $0 [-d|--apk-dir <directory>] [-s|--device-spec <file>] <path-to-bitkey-repository-directory> <path-to-build-directory>" >&2
    exit 2
fi

if [ -e "$2" ]; then
  echo "Provided build directory '$2' already exists. Please delete it before running the script again." >&2
  exit 3
fi

package_name="${3:-world.bitkey.app}"

mkdir -p "$2"

steps_path="$1/app/verifiable-build/android/verification/steps"

if [ -n "$apkSourceDir" ]; then
  printf "Copying APKs from specified directory:\n\n"
  mkdir -p "$2/from-device/downloaded"
  cp "$apkSourceDir"/* "$2/from-device/downloaded/" || exit $?
  echo "APKs copied successfully."
else
  printf "Downloading APK from phone:\n\n"
  "$steps_path/download-apk-from-phone" "$package_name" "$2/from-device/downloaded" || exit $?
fi

printf "Normalizing names of downloaded APKs:\n\n"
"$steps_path/normalize-apk-names-new" "$2/from-device/downloaded" "$2/from-device/normalized-names" "device" || exit $?

printf "Unpacking downloaded APKs:\n\n"
"$steps_path/unpack-apks" "$2/from-device/normalized-names" "$2/from-device/unpacked" || exit $?

printf "Normalizing content of downloaded APKs:\n\n"
"$steps_path/normalize-apk-content" "$2/from-device/unpacked" "$2/from-device/comparable" || exit $?

reproducible_build_variables=$(find "$2/from-device/unpacked" -type f -name "reproducible-build-variables.json" -exec cat {} \;)

printf "Building AAB from source code:\n\n"
"$steps_path/build-android-verification-aab" "$1" "$2/locally-built/aab" "$reproducible_build_variables" || exit $?

aab_path=$(find "$2/locally-built/aab" -type f -name "*.aab")

printf "Converting AAB to APKs:\n\n"
if [ -n "$deviceSpecFile" ]; then
  "$steps_path/convert-aab-to-apks" "$aab_path" "$2/locally-built/apks" "$deviceSpecFile" || exit $?
else
  "$steps_path/convert-aab-to-apks" "$aab_path" "$2/locally-built/apks" || exit $?
fi

printf "Normalizing names of locally built APKs:\n\n"
"$steps_path/normalize-apk-names-new" "$2/locally-built/apks" "$2/locally-built/normalized-names" "bundletool" || exit $?

printf "Unpacking locally built APKs:\n\n"
"$steps_path/unpack-apks" "$2/locally-built/normalized-names" "$2/locally-built/unpacked" || exit $?

printf "Normalizing content of locally built APKs:\n\n"
"$steps_path/normalize-apk-content" "$2/locally-built/unpacked" "$2/locally-built/comparable" || exit $?

printf "\n\n---------------------------\n\n"
printf "Comparing builds:\n\n"
"$steps_path/compare-apks-new" "$2/from-device" "$2/locally-built" || exit $?
