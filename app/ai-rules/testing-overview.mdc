---
description: Testing entry point and index for the Bitkey mobile app
globs: ["**/*Tests.kt", "**/src/commonTest/**", "**/src/jvmTest/**", "**/src/androidUnitTest/**", "**/src/iosTest/**", "**/src/jvmIntegrationTest/**"]
alwaysApply: true
---

# Testing Overview

## Summary
Entry point for testing guidelines. Tests: behavioral, isolated, `commonTest` preferred, 95% fakes, turbines for async.

## Philosophy
- **Write once, run everywhere:** `commonTest` preference
- **Behavioral focus:** Test what, not how
- **Fakes over mocks:** 95% fakes, 5% mocks for interaction verification
- **Complete isolation:** Hermetic tests via `reset()` methods
- **Natural language:** Sentence-like test names

## Quick Reference
| Component | Rule | Focus |
|-----------|------|-------|
| Services | @ai-rules/testing-services.mdc | Business logic |
| State Machines | @ai-rules/testing-state-machines.mdc | UI logic |
| DAOs | testing-basics.mdc | Data persistence |
| Async/Flows | @ai-rules/testing-coroutines.mdc | Turbine patterns |
| Integration | @ai-rules/testing-integration.mdc | AppTester |

## Testing Rules
- **@ai-rules/testing-basics.mdc** - Core patterns, naming, isolation
- **@ai-rules/testing-fakes-mocks.mdc** - Test doubles (prefer fakes)
- **@ai-rules/testing-coroutines.mdc** - Async operations, turbines

## Example
```kotlin
class ServiceImplTests : FunSpec({
  val dao = SpendingLimitDaoFake()
  val service = ServiceImpl(dao)
  
  beforeTest { dao.reset() }
  
  test("enables pay when valid limit provided") {
    val limit = SpendingLimit(BitcoinMoney.btc(0.1))
    
    val result = service.enablePay(limit)
    
    result.shouldBeOk()
    dao.getActiveLimit().shouldBe(limit)
  }
})
```

## Related Rules
- @ai-rules/domain-service-pattern.mdc (service architecture)
- @ai-rules/ui-state-machines.mdc (state machine architecture)