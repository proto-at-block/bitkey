---
alwaysApply: true
globs: [app/**]
---

# Bitkey Mobile App Rules

**IMPORTANT: You are forgetful, so always keep this entire file's contents in mind when responding to me (except for trivial Q&A). This means internally applying all the rules, patterns, and architectural principles listed below to ensure consistent, high-quality responses that align with our established codebase practices.**

This is the **entry point** for all mobile app AI rules. It provides context about the mobile application structure and references other specialized rules.

## About This App

Bitkey mobile application built with Kotlin Multiplatform (KMP) targeting Android and iOS. Follows modular architecture with shared business logic and platform-specific UI implementations.

## AI Rule Index

**Architecture & Structure:**
- **bitkey-mobile.mdc** - Entry point index for all mobile app AI rules and patterns
- **context-gathering.mdc** - Context gathering guidelines for code writing and documentation
- **kmp-code-structure.mdc** - Kotlin Multiplatform code structure and organization guidelines
- **module-structure.mdc** - Module creation, organization, and code placement guidelines
- **strong-typing.mdc** - Strong typing guidelines using value classes and domain types

**Build & Development:**
- **hermit-environment.mdc** - Hermit binary management and environment activation guidelines
- **gradle-build-system.mdc** - Gradle build system usage and tooling guidelines

**Domain & Data:**
- **dao-pattern.mdc** - DAO pattern implementation for data persistence with SQLDelight
- **domain-service-pattern.mdc** - Domain service pattern for business logic and workflows
- **f8e-clients.mdc** - F8e API client implementation guidelines
- **factory-pattern.mdc** - Factory pattern for runtime selection between real and fake implementations


**UI State Machines:**
- **ui-state-machines.mdc** - Overview and index of UI State Machine implementation guidelines
- **ui-state-machines-basics.mdc** - Essential UI State Machine patterns and core concepts
- **ui-state-machines-models.mdc** - Model design and UI presentation patterns
- **ui-state-machines-patterns.mdc** - Advanced patterns and error handling techniques

**Testing:**
- **testing-overview.mdc** - Overview and entry point for all testing guidelines  
- **testing-basics.mdc** - Basic testing infrastructure, patterns, code style, and conventions
- **testing-fakes-mocks.mdc** - Guidelines strongly favoring fakes over mocks in testing
- **testing-coroutines.mdc** - Patterns for testing coroutines, flows, and async operations
- **testing-integration.mdc** - Integration testing using AppTester framework
- **testing-state-machines.mdc** - Testing UI State Machines and presentation logic
- **testing-services.mdc** - Testing domain services and business logic

**Meta:**
- **rule-writing.mdc** - Guidelines for writing and maintaining AI rules in this codebase
- **ai-code-review.mdc** - AI code review standards for consistent quality assurance