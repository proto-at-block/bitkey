---
description: Integration testing using AppTester framework
globs: ["**/src/jvmIntegrationTest/**", "**/*FunctionalTests.kt"]
alwaysApply: true
---

# Integration Testing

## Summary

Integration testing using AppTester framework for end-to-end workflows with real dependencies. JVM only.

## When to Apply

- Testing end-to-end user workflows
- Verifying cross-module component integration
- Testing with real database/network layers
- Validating complete feature functionality

## How to Apply

### AppTester Framework

**Basic Setup:**
```kotlin
class MobilePayFunctionalTests : FunSpec({
  test("enables mobile pay through complete workflow") {
    val app = launchNewApp()
    
    // Create account
    val account = app.onboardFullAccountWithFakeHardware()
    
    // Enable mobile pay
    val limit = SpendingLimit(BitcoinMoney.btc(0.1))
    app.mobilePayService.enableMobilePay(limit).shouldBeOk()
    
    // Verify state
    app.mobilePayService.status().test {
      awaitItem().shouldBeTypeOf<MobilePayEnabled>()
    }
  }
})
```

### Common Extension Functions

```kotlin
// Account creation helpers
app.onboardFullAccountWithFakeHardware()
app.onboardLiteAccount()
app.onboardSoftwareAccount()

// Hardware simulation
app.simulateHardwareProofOfPossession()
app.simulateFingerprintEnrollment()

// Recovery helpers
app.initiateAccountRecovery()
app.completeRecoveryWithDelay()
```

### Testing Complete Workflows

```kotlin
test("completes lost hardware recovery") {
  val app = launchNewApp()
  
  // Setup account
  val account = app.onboardFullAccountWithFakeHardware()
  
  // Initiate recovery
  app.recoveryService
    .initiateRecovery(RecoveryType.LostHardware, account.accountId)
    .shouldBeOk()
  
  // Simulate delay period
  app.advanceTimeBy(3.days)
  
  // Complete recovery with new hardware
  val newHardware = app.simulateNewHardware()
  app.recoveryService
    .completeRecovery(newHardware)
    .shouldBeOk()
  
  // Verify account restored
  app.accountService.activeAccount().test {
    val recovered = awaitItem()
    recovered.accountId.shouldBe(account.accountId)
    recovered.hardwareId.shouldBe(newHardware.id)
  }
}
```

### Testing Database Operations

```kotlin
test("persists spending limits across app restarts") {
  // First app instance
  var app = launchNewApp()
  app.onboardFullAccountWithFakeHardware()
  
  val limit = SpendingLimit(BitcoinMoney.btc(0.05))
  app.mobilePayService.setLimit(limit).shouldBeOk()
  
  // Restart app
  app = launchNewApp()
  
  // Verify persistence
  app.mobilePayService.getActiveLimit()
    .shouldBeOk(limit)
}
```

### Testing Network Integration

```kotlin
test("syncs with f8e after network recovery") {
  val app = launchNewApp()
  app.onboardFullAccountWithFakeHardware()
  
  // Disable network
  app.networkReachability.setReachable(false)
  
  // Make changes offline
  val limit = SpendingLimitMock
  app.mobilePayService.setLimit(limit)
  
  // Re-enable network
  app.networkReachability.setReachable(true)
  
  // Verify sync
  app.awaitUntilScreenWithBody<SyncingBodyModel>()
  app.awaitUntilScreenWithBody<FormBodyModel>()
  
  // Verify server has changes
  app.f8eEnvironment.mobilePayLimits
    .shouldContain(limit)
}
```

### Testing Feature Flags

```kotlin
test("shows beta feature when flag enabled") {
  val app = launchNewApp()
  
  // Enable feature flag
  app.featureFlagService.setFlagValue(
    flag = BetaFeatureFlag,
    value = true
  )
  
  // Navigate to feature
  app.navigateToSettings()
  
  // Verify feature visible
  app.awaitUntilScreenWithBody<SettingsBodyModel> {
    items.shouldContain(BetaFeatureItem)
  }
}
```

### Testing Error Scenarios

```kotlin
test("handles f8e unavailability gracefully") {
  val app = launchNewApp()
  
  // Make f8e unavailable
  app.f8eHttpClient.setAvailable(false)
  
  // Attempt operation
  app.onboardLiteAccount()
  
  // Verify error handling
  app.awaitUntilScreenWithBody<ErrorFormBodyModel> {
    title.shouldContain("unavailable")
    primaryButton?.text.shouldBe("Retry")
  }
  
  // Restore f8e
  app.f8eHttpClient.setAvailable(true)
  
  // Retry
  app.clickPrimaryButton()
  
  // Verify success
  app.awaitUntilScreenWithBody<SuccessBodyModel>()
}
```

## Example

```kotlin
class CreateWalletE2ETests : FunSpec({
  test("creates wallet from scratch to first transaction") {
    val app = launchNewApp()
    
    // Onboarding
    app.awaitUntilScreenWithBody<OnboardingIntroBodyModel>()
    app.clickPrimaryButton() // Start
    
    // Choose account type
    app.awaitUntilScreenWithBody<AccountTypeSelectionBodyModel>()
    app.selectFullAccount()
    
    // Complete hardware pairing
    val hardware = app.simulateHardwarePairing()
    app.awaitUntilScreenWithBody<PairingSuccessBodyModel>()
    
    // Set up security
    app.setupBiometrics()
    app.createCloudBackup()
    
    // Verify wallet ready
    app.awaitUntilScreenWithBody<HomeBodyModel> {
      balance.shouldBe(BitcoinMoney.zero())
    }
    
    // Receive first funds
    app.receiveTestFunds(BitcoinMoney.btc(0.01))
    
    // Send transaction
    val recipient = "bc1q..."
    app.sendBitcoin(
      amount = BitcoinMoney.btc(0.001),
      recipient = recipient
    )
    
    // Verify transaction
    app.bitcoinWalletService.transactions().test {
      val txs = awaitItem()
      txs.first().recipientAddress.shouldBe(recipient)
    }
  }
})
```

## Testing Modules

**Core:** `:shared:integration-testing:public` - AppTester and extensions
**Platform:** Tests run in `jvmIntegrationTest` source sets only

## Related Rules

- @ai-rules/testing-basics.mdc (core patterns)
- @ai-rules/testing-services.mdc (service testing)
- @ai-rules/module-structure.mdc (module boundaries)