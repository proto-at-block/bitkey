---
description: Guidelines for writing and maintaining AI rules in this codebase
globs: ["ai-rules/**/*.mdc", "CLAUDE.md", ".claude/**/*.md", ".cursor/**/*.md", ".github/copilot-instructions.md", "README.md"]
alwaysApply: true
---

# AI Rule Writing and Maintenance

## Summary

Standards for creating, updating, and maintaining AI rules in this codebase. Ensures rules are composable, minimal, declarative, and form a consistent foundation for AI guidance across all AI assistants.

## When to Apply

- Creating new AI rule files
- Updating existing AI rules  
- Maintaining ruleset consistency
- Referencing rules in configurations
- **Modifying any existing rule file**

## How to Apply

### Rule Structure

Each rule must follow this exact structure:

```markdown
---
description: Brief description of the rule's purpose
globs: ["**/*.extension"] # File patterns where rule applies
alwaysApply: false # Set to true only for meta-rules like this one
---

# Rule Title

## Summary
One paragraph explaining what this rule does and why it exists.

## When to Apply
Clear conditions for when this rule should be followed.

## How to Apply
Specific implementation guidance and steps.

## Example
Code examples showing good vs bad patterns.

## Related Rules
References to other rules that complement or interact with this one.
```

### File Management

**Before creating:** Search existing rules, check if topic can be addressed by updating existing rule, analyze codebase for real patterns.

**Naming:** Use kebab-case (`rule-name.mdc`) in `ai-rules/` directory. Be concise (2-3 words max), descriptive, domain-focused, and action-oriented.

**Examples:**
- ✅ `error-handling.mdc`, `strong-typing.mdc`, `api-versioning.mdc`
- ❌ `guidelines-for-error-handling.mdc`, `stuff.mdc`, `kotlin-programming-best-practices.mdc`

### Rule Distribution and Discovery

**Source of Truth:** All AI rules live in `app/ai-rules/` as canonical source. Never edit rules outside this directory.

**Index Maintenance:** Update `bitkey-mobile.mdc` whenever rules are added/removed/changed. Add new rules with brief, specific descriptions (1-2 lines max) focused on primary purpose.

**Rule Index Reference:** The complete, authoritative list of all AI rules is maintained in `@ai-rules/bitkey-mobile.mdc`. This index serves as the single source of truth for rule discovery and is automatically referenced by all AI assistant configurations.

**Symlinks:** Only create symlinks in `app/.cursor/rules/` for index files and rules with `alwaysApply: true`.

**Rule Application Settings:**
- **`alwaysApply: true`**: Index files and meta-rules only
- **`alwaysApply: false`**: Specialized rules for specific contexts
- **`globs`**: Always specify file patterns where rule applies

**AI Tool Integration:**

**ALL AI assistants must be configured when creating rules:**

- Most rules are automatically included via the index (`@ai-rules/bitkey-mobile.mdc`).
- For rules with `alwaysApply: true`, additional direct references may be needed in individual AI configuration files.
- **CRITICAL:** All AI configuration files must include the instruction that AI assistants MUST read actual rule content, not make assumptions based on filenames alone.

*Claude Code:* Update `CLAUDE.md` with direct rule references or reference via index (automatic)

*Junie:* Reference via index (automatic) or direct reference in `.junie/guidelines.md` for always-apply rules

*Firebender:* Uses Cursor rules configuration - reference via index (automatic) or create symlinks in `app/.cursor/rules/` for always-apply rules

*Cursor:* Create symlinks in `app/.cursor/rules/` using `ln -sf "../../ai-rules/rule-name.mdc" "rule-name.mdc"`

*Goose:* Update `app/.goosehints` file with relative path `ai-rules/rule-name.mdc` and brief 1-2 line description of when to apply the rule. **CRITICAL:** Goose does not understand @ notation and requires explicit relative file paths with contextual descriptions for rule discovery and application.

*GitHub Copilot:* Reference via index (automatic) or add direct reference in `.github/copilot-instructions.md` for always-apply rules: `@app/ai-rules/rule-name.mdc`

### Rule Principles

**Token-optimized:** Target <3000 tokens/rule. Use bullet points, tables, concise sentences.

**Minimal:** One concern per rule. Split complex topics.

**Composable:** Work together without conflicts.

**Evidence-based:** Extract patterns from actual codebase.

**Concise examples:** Show key patterns only. Reference actual code for details.

**Include consequences:** Document negative outcomes of bad patterns for context.

### Maintenance Guidelines

**Rule Updates:** Update existing rules vs duplicating. Apply token optimization when modifying any rule.

**Ruleset Evolution:** Review for relevance, merge outdated rules, maintain consistency.

**Related Rules:** Only reference existing rules (verify with `ls ai-rules/*.mdc`), never reference future/planned rules, remove broken references when rules are deleted/renamed.

**New Rule Creation Checklist:**
1. Create rule file in `ai-rules/`
2. Add to `bitkey-mobile.mdc` index with clear description
3. Update AI assistant configurations:
   - **Claude Code**: Update `CLAUDE.md` with rule references
   - **Junie**: Auto-reference via `@ai-rules/bitkey-mobile.mdc`
   - **Firebender**: Uses Cursor rules configuration - create symlink in `.cursor/rules/` (if always-apply)
   - **Cursor**: Create symlink in `.cursor/rules/` (if always-apply)
   - **Goose**: Add to `.goosehints` with relative path and brief description
   - **GitHub Copilot**: Add to `../.github/copilot-instructions.md`
4. Verify all references point to existing rules
5. Test rule with multiple AI assistants

**Consistency Verification:**
- For Index/Always-Apply Rules: Create/update/remove `.mdc` file → update `CLAUDE.md` → update `.junie/guidelines.md` → update `.goosehints` → create/update/remove `.cursor/rules/` symlink → update `.goosehints` → update `../.github/copilot-instructions.md`
- For Specialized Rules: Create/update/remove `.mdc` file → reference via index or as-needed → update Goose hints if broadly needed → update GitHub Copilot if broadly needed
- Audit: `ls ai-rules/*.mdc`, `grep @ai-rules CLAUDE.md`, `grep @ai-rules .junie/guidelines.md`, `grep @ai-rules .goosehints`, `ls .cursor/rules/`, `cat .goosehints`, `grep @app/ai-rules ../.github/copilot-instructions.md`

## Example

```markdown
# Good Rule Structure
---
description: Error handling patterns for Kotlin services
globs: ["**/*Service.kt", "**/*Repository.kt"]
alwaysApply: false
---

# Service Error Handling

## Summary
Defines consistent error handling patterns for service layer components to ensure predictable exception propagation and user-friendly error messages.

## When to Apply
- All service layer classes
- Repository implementations
- Any component that handles business logic exceptions

## How to Apply
[Implementation details...]

## Example
```kotlin
// ✅ GOOD: Structured error handling
fun processData(input: String): Result<Data, ServiceError> {
  return try {
    val result = validateAndProcess(input)
    Ok(result)
  } catch (e: ValidationException) {
    Err(ServiceError.InvalidInput(e.message))
  }
}

// ❌ BAD: Unhandled exceptions
// CONSEQUENCES: App crashes, poor user experience, difficult debugging, inconsistent error states
fun processData(input: String): Data {
  return validateAndProcess(input) // Can throw unhandled exceptions
}
```

## Related Rules
- @ai-rules/strong-typing.mdc (for error result types)
```

## Related Rules

This is the foundational rule that all other rules should follow. Future rules about specific coding practices, architecture patterns, or conventions should reference this rule for structural guidance.