import build.wallet.crypto.PublicKey;
import build.wallet.bitkey.app.AppGlobalAuthKey;
import build.wallet.bitkey.app.AppRecoveryAuthKey;
import build.wallet.bitkey.app.AppSpendingPublicKey;
import build.wallet.bitkey.f8e.F8eSpendingPublicKey;
import build.wallet.bitkey.f8e.FullAccountId;
import build.wallet.bitkey.factor.PhysicalFactor;
import build.wallet.bitkey.hardware.AppGlobalAuthKeyHwSignature;
import build.wallet.bitkey.hardware.HwAuthPublicKey;
import build.wallet.bitkey.hardware.HwSpendingPublicKey;
import build.wallet.cloud.backup.csek.SealedCsek;
import build.wallet.cloud.backup.csek.SealedSsek;
import build.wallet.bitcoin.BitcoinNetworkType;
import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE activeServerRecoveryEntity(
  rowId                         INTEGER NOT NULL PRIMARY KEY,
  account                       TEXT AS FullAccountId NOT NULL,
  startTime                     INTEGER AS Instant NOT NULL,
  endTime                       INTEGER AS Instant NOT NULL,
  lostFactor                    TEXT AS PhysicalFactor NOT NULL,
  destinationAppGlobalAuthKey   TEXT AS PublicKey<AppGlobalAuthKey> NOT NULL,
  destinationAppRecoveryAuthKey TEXT AS PublicKey<AppRecoveryAuthKey> NOT NULL,
  destinationHardwareAuthKey    TEXT AS HwAuthPublicKey NOT NULL
);

CREATE TABLE localRecoveryAttemptEntity(
  rowId                           INTEGER NOT NULL PRIMARY KEY,
  account                         TEXT AS FullAccountId NOT NULL,
  destinationAppGlobalAuthKey     TEXT AS PublicKey<AppGlobalAuthKey> NOT NULL,
  destinationAppRecoveryAuthKey   TEXT AS PublicKey<AppRecoveryAuthKey> NOT NULL,
  destinationHardwareAuthKey      TEXT AS HwAuthPublicKey NOT NULL,
  destinationAppSpendingKey       TEXT AS AppSpendingPublicKey NOT NULL,
  destinationHardwareSpendingKey  TEXT AS HwSpendingPublicKey NOT NULL,
  appGlobalAuthKeyHwSignature     TEXT AS AppGlobalAuthKeyHwSignature NOT NULL,
  lostFactor                      TEXT AS PhysicalFactor NOT NULL,
  -- presence of above means initiated status
  hadServerRecovery                INTEGER AS Boolean NOT NULL,
  -- presence of above means we had a server recovery at some point
  sealedCsek                      BLOB AS SealedCsek,
  -- presence of above means we are attempting auth key rotation (server completion)
  authKeysRotated                 INTEGER AS Boolean NOT NULL,
-- presence of above means we completed auth key rotation (server completion)
  -- presence of above means authKeysRotated status
  serverKeysetId                  TEXT,
  serverSpendingKey               TEXT AS F8eSpendingPublicKey,
  -- presence of above means spending keys were created
  backedUpToCloud                 INTEGER AS Boolean NOT NULL,
  -- presence of above means backed up to cloud status
  ddkBackedUp                     INTEGER AS Boolean NOT NULL DEFAULT 0,
  -- presence of above means we've sealed the ddk with new hardware (HW Recovery) & uploaded to F8e
  sealedSsek                      BLOB AS SealedSsek,
  -- sealed SSEK for descriptor encryption/decryption
  uploadedDescriptorBackups       INTEGER AS Boolean NOT NULL DEFAULT 0,
  -- presence of above means we've uploaded descriptor backups to F8e after rotating spending keys
  spendingKeysActivated           INTEGER AS Boolean NOT NULL DEFAULT 0
  -- presence of above means spending keys have been activated
);

-- Table for storing spending keysets during recovery
CREATE TABLE recoverySpendingKeysetEntity(
  id                              INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  recoveryAttemptRowId            INTEGER NOT NULL,
  keysetLocalId                   TEXT NOT NULL,
  keysetServerId                  TEXT NOT NULL,
  appKey                          TEXT AS AppSpendingPublicKey NOT NULL,
  hardwareKey                     TEXT AS HwSpendingPublicKey NOT NULL,
  serverKey                       TEXT AS F8eSpendingPublicKey NOT NULL,
  networkType                     TEXT AS BitcoinNetworkType NOT NULL,
  FOREIGN KEY (recoveryAttemptRowId) REFERENCES localRecoveryAttemptEntity(rowId) ON DELETE CASCADE
);

getServerRecovery:
SELECT * FROM activeServerRecoveryEntity WHERE rowId = 0;

getLocalRecovery:
SELECT * FROM localRecoveryAttemptEntity WHERE rowId = 0;

setActiveServerRecovery {
  INSERT OR REPLACE INTO activeServerRecoveryEntity(rowId, account, startTime, endTime, lostFactor, destinationAppGlobalAuthKey, destinationAppRecoveryAuthKey, destinationHardwareAuthKey)
    -- Use stable id to ensure we only ever have a single active recovery.
    VALUES(0, ?, ?, ?, ?, ?, ?, ?);
  UPDATE localRecoveryAttemptEntity
    SET hadServerRecovery = 1
    WHERE rowId = 0;
}

clearActiveServerRecovery:
DELETE FROM activeServerRecoveryEntity;

purgeUnconfirmedLocalRecoveryAttempts:
DELETE FROM localRecoveryAttemptEntity WHERE hadServerRecovery = 0;

clear {
    DELETE FROM activeServerRecoveryEntity;
    DELETE FROM localRecoveryAttemptEntity;
}

markAsInitiated:
INSERT INTO localRecoveryAttemptEntity(rowId, account, destinationAppGlobalAuthKey, destinationAppRecoveryAuthKey, destinationHardwareAuthKey, destinationAppSpendingKey, destinationHardwareSpendingKey, appGlobalAuthKeyHwSignature, lostFactor, sealedCsek, sealedSsek, authKeysRotated, serverKeysetId, serverSpendingKey, uploadedDescriptorBackups, spendingKeysActivated, ddkBackedUp, backedUpToCloud, hadServerRecovery)
-- Use stable id to ensure we only ever have a single active set of local pending recovery keys.
VALUES(0, ?, ?, ?, ?, ?, ?, ?, ?, NULL, NULL, 0, NULL, NULL, 0, 0, 0, 0, 0);

-- To protect against race conditions where we might not get a server sync between the time we
-- rotate auth keys to the time we complete our recovery on the app, we clear the server recovery
-- so that it doesn't look like there's still an exisiting one once we exit the
-- recovery completion flow. We could eliminate the need for this by, for example, calling sync
-- manually after completion (and blocking on it). Currently the syncer doesn't support
-- on-demand or transactional syncs, which we'd need to let the syncer handle this for us.
markAuthKeysRotated {
    DELETE FROM activeServerRecoveryEntity;
    UPDATE localRecoveryAttemptEntity SET authKeysRotated = 1;
}

markAsAttemptingCompletion:
UPDATE localRecoveryAttemptEntity SET sealedCsek = :sealedCsek, sealedSsek = :sealedSsek;

markAttemptedCompletionAsFailed:
UPDATE localRecoveryAttemptEntity SET sealedCsek = NULL;

markSpendingKeysCreated:
UPDATE localRecoveryAttemptEntity SET serverKeysetId = ?, serverSpendingKey = ?;

markSpendingKeysActivated:
UPDATE localRecoveryAttemptEntity SET spendingKeysActivated = 1;

markUploadedDescriptorBackups:
UPDATE localRecoveryAttemptEntity SET uploadedDescriptorBackups = 1;

markDdkBackedUp:
UPDATE localRecoveryAttemptEntity SET ddkBackedUp = 1;

markCloudBackedUp:
UPDATE localRecoveryAttemptEntity SET backedUpToCloud = 1;

clearLocalRecoveryAttempt:
DELETE FROM localRecoveryAttemptEntity;

-- Recovery Spending Keyset queries
insertRecoverySpendingKeyset:
INSERT INTO recoverySpendingKeysetEntity(recoveryAttemptRowId, keysetLocalId, keysetServerId, appKey, hardwareKey, serverKey, networkType)
VALUES (?, ?, ?, ?, ?, ?, ?);

getRecoverySpendingKeysets:
SELECT * FROM recoverySpendingKeysetEntity WHERE recoveryAttemptRowId = 0;

clearRecoverySpendingKeysets:
DELETE FROM recoverySpendingKeysetEntity WHERE recoveryAttemptRowId = 0;
