import build.wallet.bitcoin.BitcoinNetworkType;
import build.wallet.bitkey.f8e.FullAccountId;
import build.wallet.bitkey.hardware.AppGlobalAuthKeyHwSignature;
import build.wallet.f8e.F8eEnvironment;
import kotlin.Boolean;
import kotlin.time.Duration;

-- Table for Full Account's Keybox data, contains spending keysets.
CREATE TABLE keyboxEntity(
  id                                    TEXT NOT NULL PRIMARY KEY,
  accountId                             TEXT AS FullAccountId NOT NULL,
  networkType                           TEXT AS BitcoinNetworkType NOT NULL,
  fakeHardware                          INTEGER AS Boolean NOT NULL,
  f8eEnvironment                        TEXT AS F8eEnvironment NOT NULL,
  isTestAccount                         INTEGER AS Boolean NOT NULL,
  isUsingSocRecFakes                    INTEGER AS Boolean NOT NULL,
  delayNotifyDuration                   TEXT AS Duration,
  appGlobalAuthKeyHwSignature           TEXT AS AppGlobalAuthKeyHwSignature NOT NULL,
  canUseKeyboxKeysets                   INTEGER AS Boolean NOT NULL DEFAULT 0,
  FOREIGN KEY (accountId)               REFERENCES fullAccountEntity(accountId) ON DELETE CASCADE
);

insertKeybox:
INSERT OR REPLACE INTO keyboxEntity(id, accountId, networkType, fakeHardware, f8eEnvironment, isTestAccount, isUsingSocRecFakes, delayNotifyDuration, appGlobalAuthKeyHwSignature, canUseKeyboxKeysets)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

rotateAppGlobalAuthKeyHwSignature:
UPDATE keyboxEntity
SET appGlobalAuthKeyHwSignature = ?
WHERE id = ?;

-- Query to get a keybox by ID
keyboxById:
SELECT * FROM keyboxEntity WHERE id = ?;

clear:
DELETE FROM keyboxEntity;

-- Query to delete a specific keybox by ID
deleteKeybox:
DELETE FROM keyboxEntity WHERE id = ?;

-- Query to count total keyboxes
countKeyboxes:
SELECT COUNT(*) FROM keyboxEntity;
