import build.wallet.bitkey.f8e.FullAccountId;

-- Table for Full Account data. This can be an active or an onboarding account, if any.
CREATE TABLE fullAccountEntity(
  accountId           TEXT AS FullAccountId NOT NULL PRIMARY KEY
);

-- Table for an active Full Account data, if any.
CREATE TABLE activeFullAccountEntity(
  rowId      INTEGER NOT NULL PRIMARY KEY,
  accountId  TEXT AS FullAccountId NOT NULL,
  FOREIGN KEY (accountId) REFERENCES fullAccountEntity(accountId)
);

-- Table for an onboarding Full Account data, if any.
CREATE TABLE onboardingFullAccountEntity(
  rowId     INTEGER NOT NULL PRIMARY KEY,
  accountId  TEXT AS FullAccountId NOT NULL,
  FOREIGN KEY (accountId) REFERENCES fullAccountEntity(accountId)
);

-- Query to set a Full account
insertFullAccount:
INSERT OR REPLACE INTO fullAccountEntity(accountId)
VALUES (?);

-- Query to set a Full account as active to make it ready to use.
setActiveFullAccountId:
INSERT OR REPLACE INTO activeFullAccountEntity(rowId, accountId)
-- Use stable row ID to ensure we only ever have a single active Full Account.
VALUES(0, ?);

-- Query to get currently active Full Account, if any.
getActiveFullAccount:
SELECT fullAccountView.*
FROM fullAccountView
INNER JOIN activeFullAccountEntity
ON fullAccountView.accountId = activeFullAccountEntity.accountId;

setOnboardingFullAccountId:
INSERT OR REPLACE INTO onboardingFullAccountEntity(rowId, accountId)
-- Use stable row ID to ensure we only ever have a single FUll Account being onboarded.
VALUES(0, ?);

getOnboardingFullAccount:
SELECT fullAccountView.*
FROM fullAccountView
INNER JOIN onboardingFullAccountEntity
ON fullAccountView.accountId = onboardingFullAccountEntity.accountId;

clearOnboardingFullAccount:
DELETE FROM onboardingFullAccountEntity;

-- Query to delete account data.
clear {
  DELETE FROM activeFullAccountEntity;
  DELETE FROM onboardingFullAccountEntity;
  DELETE FROM fullAccountEntity;
}

-- Query to delete a specific account by ID
deleteAccount:
DELETE FROM fullAccountEntity WHERE accountId = ?;

-- Query to count total accounts
countAccounts:
SELECT COUNT(*) FROM fullAccountEntity;

-- A view to get keybox's data with all of its active keys
CREATE VIEW fullAccountView AS
SELECT
  fullAccountEntity.accountId AS accountId,
  keyboxEntity.id AS keyboxId,
  keyboxEntity.networkType,
  keyboxEntity.fakeHardware,
  keyboxEntity.f8eEnvironment,
  keyboxEntity.isTestAccount,
  keyboxEntity.isUsingSocRecFakes,
  keyboxEntity.delayNotifyDuration,
  keyboxEntity.appGlobalAuthKeyHwSignature,
  keyboxEntity.canUseKeyboxKeysets,
  spendingKeysetEntity.id AS spendingPublicKeysetId,
  spendingKeysetEntity.serverId AS spendingPublicKeysetServerId,
  spendingKeysetEntity.appKey,
  spendingKeysetEntity.hardwareKey,
  spendingKeysetEntity.serverKey,
  appKeyBundleEntity.id AS appKeyBundleId,
  appKeyBundleEntity.globalAuthKey,
  appKeyBundleEntity.recoveryAuthKey,
  hwKeyBundleEntity.id AS hwKeyBundleId,
  hwKeyBundleEntity.authKey AS hwAuthKey,
  hwKeyBundleEntity.spendingKey AS hwSpendingKey
FROM fullAccountEntity
-- keybox
INNER JOIN keyboxEntity
ON keyboxEntity.accountId = fullAccountEntity.accountId
-- spending public keyset (active one only)
INNER JOIN spendingKeysetEntity
ON spendingKeysetEntity.keyboxId = keyboxEntity.id AND spendingKeysetEntity.isActive = 1
-- app key bundle (active one only)
INNER JOIN appKeyBundleEntity
ON appKeyBundleEntity.keyboxId = keyboxEntity.id AND appKeyBundleEntity.isActive = 1
-- hw key bundle (active one only)
INNER JOIN hwKeyBundleEntity
ON hwKeyBundleEntity.keyboxId = keyboxEntity.id AND hwKeyBundleEntity.isActive = 1;
