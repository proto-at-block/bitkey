namespace core {
  WalletDescriptor compute_frost_wallet_descriptor(PublicKey agg_public_key, Network network);
  [Throws=SignatureUtilsError]
  DERSignature compact_signature_to_der([ByRef] CompactSignature compact_signature);
  [Throws=SignatureUtilsError]
  CompactSignature compact_signature_from_der([ByRef] DERSignature der_signature);
};

[Error]
enum SecretKeyError {
  "InvalidSecretBytes",
};

interface SecretKey {
  [Throws=SecretKeyError]
  constructor(sequence<u8> secret_bytes);

  Signature sign_message(sequence<u8> message);

  PublicKey as_public();
};

enum WsmContext {
  "DeriveKeyV1",
  "CreateKeyV1",
};

[Error]
enum WsmIntegrityVerifierError {
  "MalformedSignature",
  "MalformedPublicKey",
  "Base58DecodeFailure",
  "Base16DecodeFailure",
};

interface WsmIntegrityVerifier {
  constructor(PublicKey pubkey);
  [Throws=WsmIntegrityVerifierError]
  boolean verify(string base58_message, string signature);
  [Throws=WsmIntegrityVerifierError]
  boolean verify_hex_message(string hex_message, string signature);
};

[Error]
enum InvoiceError {
  "InvalidInvoiceFormat",
  "InvalidPaymentHash"
};

interface Invoice {
  [Throws=InvoiceError]
  constructor(string invoice_string);
  Sha256 payment_hash();
  PublicKey? payee_pubkey();
  boolean is_expired();
  u64? amount_msat();
};

[Custom]
typedef sequence<u8> DERSignature;

[Custom]
typedef sequence<u8> CompactSignature;

[Custom]
typedef string Sha256;

[Custom]
typedef string PublicKey;

[Custom]
typedef string Signature;

interface Secp256k1SharedSecret {
  constructor([ByRef] PublicKey point, [ByRef] SecretKey scalar);
  bytes secret_bytes();
};

[Error]
enum HkdfError {
  "ExpandError",
};

interface Hkdf {
  constructor([ByRef] bytes salt, [ByRef] bytes ikm);
  [Throws=HkdfError]
  bytes expand([ByRef] bytes info, i32 len);
};

[Error]
enum ChaCha20Poly1305Error {
  "XChaCha20InstantiationError",
  "EncryptError",
  "DecryptError",
};

interface XChaCha20Poly1305 {
  [Throws=ChaCha20Poly1305Error]
  constructor([ByRef] bytes key);

  [Throws=ChaCha20Poly1305Error]
  bytes encrypt([ByRef] bytes nonce, [ByRef] bytes plaintext, [ByRef] bytes aad);

  [Throws=ChaCha20Poly1305Error]
  bytes decrypt([ByRef] bytes nonce, [ByRef] bytes ciphertext, [ByRef] bytes aad);
};

[Error]
enum Spake2Error {
  "ContextCreationError",
  "LengthError",
  "GenerateMessageError",
  "ProcessMessageError",
  "InvalidName",
  "HkdfError",
  "MacError",
  "InvalidRole",
};

interface Spake2Context {
  [Throws=Spake2Error]
  constructor(Spake2Role my_role, string my_name, string their_name);

  [Throws=Spake2Error]
  bytes generate_msg(bytes password);

  [Throws=Spake2Error]
  Spake2Keys process_msg(bytes their_msg, bytes? aad);

  [Throws=Spake2Error]
  bytes generate_key_conf_msg([ByRef] Spake2Keys keys);

  [Throws=Spake2Error]
  void process_key_conf_msg(bytes received_mac, [ByRef] Spake2Keys keys);

  bytes read_private_key();

  bytes read_public_key();

  [Throws=Spake2Error]
  void write_key_pair(bytes private_key, bytes public_key);
};

dictionary Spake2Keys {
  bytes alice_encryption_key;
  bytes bob_encryption_key;
  bytes alice_conf_key;
  bytes bob_conf_key;
};

enum Spake2Role {
  "Alice",
  "Bob",
};

[Error]
enum SignatureVerifierError {
  "Secp256k1Error",
};

interface SignatureVerifier {
  [Throws=SignatureVerifierError]
  constructor([ByRef] bytes signature);

  [Throws=SignatureVerifierError]
  void verify_ecdsa([ByRef] bytes message, [ByRef] bytes pubkey);
};

[Error]
enum CryptoBoxError {
  "CryptoBoxInstantiationError",
  "EncryptError",
  "DecryptError",
};

interface CryptoBox {
  [Throws=CryptoBoxError]
  constructor([ByRef] bytes public_key, [ByRef] bytes secret_key);

  [Throws=CryptoBoxError]
  bytes encrypt([ByRef] bytes nonce, [ByRef] bytes plaintext);

  [Throws=CryptoBoxError]
  bytes decrypt([ByRef] bytes nonce, [ByRef] bytes ciphertext);
};

[Error]
enum CryptoBoxKeyPairError {
  "CryptoBoxKeyPairInstantiationError",
};

interface CryptoBoxKeyPair {
  constructor();

  // secret_bytes are SecretKey.to_bytes() ([u8; 32])
  [Name=from_secret_bytes, Throws=CryptoBoxKeyPairError]
  constructor(bytes secret_bytes);

  bytes public_key();

  bytes secret_key();
};

[Error]
enum P256BoxError {
  "PublicKeyError",
  "SecretKeyError",
  "EncryptError",
  "DecryptError",
  "HkdfError",
  "CipherInstantiationError",
  "InvalidNonceLengthError",
};

interface P256Box {
  [Throws=P256BoxError]
  constructor([ByRef] bytes public_key, [ByRef] bytes secret_key);

  [Throws=P256BoxError]
  bytes encrypt([ByRef] bytes nonce, [ByRef] bytes plaintext);

  [Throws=P256BoxError]
  bytes decrypt([ByRef] bytes nonce, [ByRef] bytes ciphertext);
};

[Error]
enum P256BoxKeyPairError {
  "InstantiationError",
};

interface P256BoxKeyPair {
  constructor();

  // secret_bytes are SecretKey.to_bytes() ([u8; 32])
  [Name=from_secret_bytes, Throws=P256BoxKeyPairError]
  constructor(bytes secret_bytes);

  bytes public_key();

  bytes secret_key();
};

[Error]
enum KeygenError {
  "MissingSharePackage",
  "InvalidProofOfKnowledge",
  "InvalidIntermediateShare",
  "InvalidKeyCommitments",
  "InvalidParticipants",
  "ShareAggregationFailed",
  "VerificationShareGenerationFailed"
};

interface SharePackage {};

dictionary KeyCommitments {
  sequence<PublicKey> vss_commitments;
  PublicKey aggregate_public_key;
};

dictionary ShareDetails {
  FrostShare secret_share;
  KeyCommitments key_commitments;
};

interface ShareGenerator {
  constructor();

  [Throws=KeygenError]
  string generate();
  [Throws=KeygenError]
  ShareDetails aggregate(string sealed_response);
  [Throws=KeygenError]
  string encode_complete_distribution_request(ShareDetails share_details);
};

[Custom]
typedef sequence<u8> FrostShare;

[Custom]
typedef string DescriptorPublicKey;

dictionary WalletDescriptor {
  DescriptorPublicKey external;
  DescriptorPublicKey change;
};

enum FfiNetwork {
  "Bitcoin",
  "Testnet",
  "Signet",
  "Regtest",
};

[Custom]
typedef FfiNetwork Network;

[Error]
enum NoiseWrapperError {
  "InternalError",
  "HandshakeNotMyTurn",
  "HandshakeNotFinished",
  "Transport",
  "IllegalState",
};

enum NoiseRole {
  "Initiator",
  "Responder",
};

[Enum]
interface PrivateKey {
  InMemory(bytes secret_bytes);
  HardwareBacked(string name);
};

interface NoiseContext {
  [Throws=NoiseWrapperError]
  constructor(NoiseRole role, PrivateKey privkey, bytes? their_public_key, HardwareBackedDh? dh);

  [Throws=NoiseWrapperError]
  bytes initiate_handshake();

  [Throws=NoiseWrapperError]
  bytes? advance_handshake(bytes peer_handshake_message);

  [Throws=NoiseWrapperError]
  void finalize_handshake();

  [Throws=NoiseWrapperError]
  bytes encrypt_message([ByRef] bytes message);

  [Throws=NoiseWrapperError]
  bytes decrypt_message([ByRef] bytes ciphertext);
};

dictionary HardwareBackedKeyPair {
  string privkey_name;
  bytes pubkey;
};

// callback interface is soft-deprecated, but we have to use it for now.
// https://github.com/squareup/wallet/pull/18047#issuecomment-2353790460
callback interface HardwareBackedDh {
  [Throws=DhError]
  bytes dh(string our_privkey_name, bytes peer_pubkey);
  [Throws=DhError]
  HardwareBackedKeyPair generate();
  [Throws=DhError]
  bytes pubkey(string privkey_name);
};

[Error]
enum DhError {
  "InvalidPublicKey",
  "ExchangeFailed"
};

interface FrostSigner {
  [Throws=SigningError]
  constructor(Psbt psbt, ShareDetails share_details);
  [Throws=SigningError]
  string sign_psbt_request();
  [Throws=SigningError]
  Psbt sign_psbt(string sealed_response);
};

[Custom]
typedef string Psbt;

[Error]
enum SigningError {
  "InvalidPsbt",
  "UnableToRetrieveSighash",
  "InvalidCounterpartyCommitments",
  "NonceAlreadyUsed",
  "CommitmentMismatch",
  "MissingCounterpartyNonces",
  "UnableToFinalizePsbt",
};

[Error]
enum SignatureUtilsError {
  "InvalidCompactSignature",
  "InvalidDerSignature",
};
