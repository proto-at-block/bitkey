package build.wallet.grants

import build.wallet.logging.logError
import okio.Buffer
import okio.ByteString

private const val DESERIALIZATION_TAG = "GrantRequestDeserialization"

/**
 * A message generated by the hardware firmware to request server authorization for a specific action.
 *
 * - version: Byte
 * - device_id: ByteArray
 * - challenge: ByteArray
 * - action: GrantAction
 * - signature: ByteArray
 */
data class GrantRequest(
  val version: Byte,
  val deviceId: ByteArray,
  val challenge: ByteArray,
  val action: GrantAction,
  val signature: ByteArray,
) {
  override fun equals(other: Any?): Boolean {
    if (this === other) return true
    return other is GrantRequest &&
      version == other.version &&
      deviceId.contentEquals(other.deviceId) &&
      challenge.contentEquals(other.challenge) &&
      action == other.action &&
      signature.contentEquals(other.signature)
  }

  override fun hashCode(): Int {
    return arrayOf(
      version,
      deviceId.contentHashCode(),
      challenge.contentHashCode(),
      action,
      signature.contentHashCode()
    ).contentHashCode()
  }

  companion object {
    fun fromBytes(bytes: ByteString): GrantRequest? {
      if (bytes.size != SERIALIZED_GRANT_REQUEST_LENGTH) {
        logError(tag = DESERIALIZATION_TAG) {
          "Incorrect length. Expected $SERIALIZED_GRANT_REQUEST_LENGTH, got ${bytes.size}"
        }
        return null
      }
      val buffer = Buffer().write(bytes)

      val version = buffer.readByte()
      val deviceId = buffer.readByteArray(GRANT_DEVICE_ID_LEN.toLong())
      val challenge = buffer.readByteArray(GRANT_CHALLENGE_LEN.toLong())
      val actionByte = buffer.readByte()
      val signature = buffer.readByteArray(GRANT_SIGNATURE_LEN.toLong())

      val action = when (actionByte) {
        1.toByte() -> GrantAction.FINGERPRINT_RESET
        2.toByte() -> GrantAction.TRANSACTION_VERIFICATION
        else -> {
          logError(tag = DESERIALIZATION_TAG) { "Unknown action byte: $actionByte" }
          return null
        }
      }

      return GrantRequest(
        version = version,
        deviceId = deviceId,
        challenge = challenge,
        action = action,
        signature = signature
      )
    }
  }
}
